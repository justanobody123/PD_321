https://github.com/okovtun/PD_321.git
https://www.youtube.com/watch?v=DJgLqTRrUiE&list=PLeqyOOqxeiINqPSzLEh9Oq9eIjtKj_rHv

TODO:
Запретить изменение элементов списка 'right' в операторе '+';

DONE:
В двусвязный список добавить методы pop_back(), insert() и erase();	DONE

DONE:
1. В 'ForwardList' добавить следующие методы:
	??? pop_front(???);	DONE
	??? pop_back(???);	DONE
	??? insert(???);	DONE
	??? erase(???);		DONE
2. Оптимизировать методы добавления элементов;				DONE
3. Деструктор списка должен удалять все элементы списка;	DONE
4. Написать CopyMethods: CopyConstructor, CopyAssignment;	DONE
5. Написать MoveMethods: MoveConstructor, MoveAssignment;	DOME
6. Написать operator+(), который выполняет конкатенацию списков;		DONE
7. Проверочный код в секции 'RANGE_BASED_FOR_LIST' должен заработать:	DONE
	https://github.com/okovtun/PD_321/blob/6fcb1bda970639a5ea5d086ac2e96a1144d11822/DataContainers/ForwardList/main.cpp#L189C1-L189C1
8. Написать метод ??? reverse(???), который меняет порядок следования элементов списка на противоположный,
   и применить этот метод в других методах для оптимизации производительности списка;	DONE

DONE:
1. Добавить фильтрацию данных в дочерние классы;							DONE
2. Написать метод info(), который автоматизирует вывод информации о фигуре;	DONE
3. Добавить в иерархию фигур круг и треугольник;							DONE
4. Добавить в иерархию равносторониий и прямоугольный треугольники;			DONE
5. Создать commit, создать ветку 'single_draw', и в этой ветке вынести код рисования в базовый класс;	DONE
6. Добавить в иерархию фигур параллелограмм и трапецию;
7. В отдельной ветке нарисовать все эти фигуры при помощи OpenGL;

DONE:
1. Из файла '201 RAW.txt' создать файл '201 ready.txt', и в этом файле	DONE
   столбики с IP и MAC адресом должны быть поменяны местами.
	https://github.com/okovtun/PD_321/blob/master/Inheritance/Files/Files/201%20RAW.txt
2. На основании файла '201 RAW.txt' создать файл вида '201.dhcpd':		DONE
	https://github.com/okovtun/PD_321/blob/master/Inheritance/Files/Files/201.dhcpd
3. Дописать функцию void save(....), которая сохраняет группу в файл;	DONE
4. Написать функцию ??? load(???), которая загружает группу из файла в массив объектов;

DONE:
Создать ветку 'AcademySeparated', и в этой ветке вынести отдельные классы в отдельные файлы;

DONE:
Создать ветку 'FractionSeparated', и в этой ветке вынести класс 'Fraction' в отдельные файлы;

DONE:
1. Перегрузить оператор +=;
2. Move semantic:https://legacy.cplusplus.com/doc/tutorial/classes2/

DONE:
1. Проверочный код в секции 'CONVERSIONS_HOME_WORK' должен заработать:	DONE
	https://github.com/okovtun/PD_321/blob/621e5b53af424a77de56f2b030277a46bf091a7c/IntroductionToOOP/Fraction/main.cpp#L398
2. Проверочный код в секции 'OPERATOR_PLUS_CHECK' должен заработать:
	https://github.com/okovtun/PD_321/blob/1a08a1f048211c5f9c6b3ec9f1fb3990d1a3c2f4/IntroductionToOOP/String/main.cpp#L94C2-L94C2

DONE:
0. Догрузить все недостающие операторы;
1. Для класса 'Fraction' перегрузить оператор ввода:
	Fraction A;
	cout << "Введите простую дробь: ";
	cin >> A;
	cout << A << endl;
2. https://legacy.cplusplus.com/doc/tutorial/typecasting/


DONE:
Для класса 'Fraction' перегрузить арифметические операции и составные присваивания (+=, -=, *=, /=).

DONE:
В Solution 'IntroductionToOOP' добавить проект 'Fraction', и в нем реализовать класс 'Fraction',
описывающий простую дробь. В классе должны быть все необходимые методы и операторы;

DONE:
0. Выучить теорию!!!!!!!!!!!!!!!!!!!!!!!!!
1. Написать метод ??? distance(???), который возвращает расстояние до указанной точки;
2. Написать функцию ??? distance(???), которая возвращает расстояние между двумя точками;

https://legacy.cplusplus.com/doc/tutorial/classes2/